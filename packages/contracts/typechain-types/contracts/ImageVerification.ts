/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ImageVerification {
  export type ModelStruct = {
    id: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    approved: PromiseOrValue<boolean>;
  };

  export type ModelStructOutput = [string, string, boolean] & {
    id: string;
    name: string;
    approved: boolean;
  };

  export type VerificationResultStruct = {
    contentHash: PromiseOrValue<BytesLike>;
    modelId: PromiseOrValue<BytesLike>;
    scoreBps: PromiseOrValue<BigNumberish>;
    verified: PromiseOrValue<boolean>;
    timestamp: PromiseOrValue<BigNumberish>;
    verifier: PromiseOrValue<string>;
  };

  export type VerificationResultStructOutput = [
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    string
  ] & {
    contentHash: string;
    modelId: string;
    scoreBps: BigNumber;
    verified: boolean;
    timestamp: BigNumber;
    verifier: string;
  };
}

export interface ImageVerificationInterface extends utils.Interface {
  functions: {
    "addVerifier(address)": FunctionFragment;
    "approveModel(bytes32,string)": FunctionFragment;
    "approvedModels(bytes32)": FunctionFragment;
    "authorizedVerifiers(address)": FunctionFragment;
    "getApprovedModels()": FunctionFragment;
    "getVerification(bytes32)": FunctionFragment;
    "isImageVerified(bytes32)": FunctionFragment;
    "minScoreThreshold()": FunctionFragment;
    "modelIds(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeVerifier(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMinScoreThreshold(uint256)": FunctionFragment;
    "setTruChain(address)": FunctionFragment;
    "setVerificationPrice(uint256)": FunctionFragment;
    "storeVerification(bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "storeVerificationWithPayment(bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "truChain()": FunctionFragment;
    "verificationCount()": FunctionFragment;
    "verificationPrice()": FunctionFragment;
    "verifications(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addVerifier"
      | "approveModel"
      | "approvedModels"
      | "authorizedVerifiers"
      | "getApprovedModels"
      | "getVerification"
      | "isImageVerified"
      | "minScoreThreshold"
      | "modelIds"
      | "owner"
      | "removeVerifier"
      | "renounceOwnership"
      | "setMinScoreThreshold"
      | "setTruChain"
      | "setVerificationPrice"
      | "storeVerification"
      | "storeVerificationWithPayment"
      | "transferOwnership"
      | "truChain"
      | "verificationCount"
      | "verificationPrice"
      | "verifications"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveModel",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedModels",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedVerifiers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedModels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerification",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isImageVerified",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "minScoreThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modelIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinScoreThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTruChain",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeVerification",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "storeVerificationWithPayment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "truChain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verificationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verificationPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifications",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedModels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedModels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isImageVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minScoreThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modelIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinScoreThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTruChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeVerificationWithPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "truChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verificationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifications",
    data: BytesLike
  ): Result;

  events: {
    "ImageVerified(bytes32,bytes32,uint256,bool,uint256)": EventFragment;
    "ModelApproved(bytes32,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentProcessed(address,uint256)": EventFragment;
    "VerificationPriceUpdated(uint256)": EventFragment;
    "VerifierAdded(address)": EventFragment;
    "VerifierRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ImageVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModelApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerificationPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierRemoved"): EventFragment;
}

export interface ImageVerifiedEventObject {
  contentHash: string;
  modelId: string;
  scoreBps: BigNumber;
  verified: boolean;
  timestamp: BigNumber;
}
export type ImageVerifiedEvent = TypedEvent<
  [string, string, BigNumber, boolean, BigNumber],
  ImageVerifiedEventObject
>;

export type ImageVerifiedEventFilter = TypedEventFilter<ImageVerifiedEvent>;

export interface ModelApprovedEventObject {
  modelId: string;
  modelName: string;
}
export type ModelApprovedEvent = TypedEvent<
  [string, string],
  ModelApprovedEventObject
>;

export type ModelApprovedEventFilter = TypedEventFilter<ModelApprovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentProcessedEventObject {
  user: string;
  amount: BigNumber;
}
export type PaymentProcessedEvent = TypedEvent<
  [string, BigNumber],
  PaymentProcessedEventObject
>;

export type PaymentProcessedEventFilter =
  TypedEventFilter<PaymentProcessedEvent>;

export interface VerificationPriceUpdatedEventObject {
  newPrice: BigNumber;
}
export type VerificationPriceUpdatedEvent = TypedEvent<
  [BigNumber],
  VerificationPriceUpdatedEventObject
>;

export type VerificationPriceUpdatedEventFilter =
  TypedEventFilter<VerificationPriceUpdatedEvent>;

export interface VerifierAddedEventObject {
  verifier: string;
}
export type VerifierAddedEvent = TypedEvent<[string], VerifierAddedEventObject>;

export type VerifierAddedEventFilter = TypedEventFilter<VerifierAddedEvent>;

export interface VerifierRemovedEventObject {
  verifier: string;
}
export type VerifierRemovedEvent = TypedEvent<
  [string],
  VerifierRemovedEventObject
>;

export type VerifierRemovedEventFilter = TypedEventFilter<VerifierRemovedEvent>;

export interface ImageVerification extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ImageVerificationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveModel(
      modelId: PromiseOrValue<BytesLike>,
      modelName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvedModels(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        id: string;
        name: string;
        approved: boolean;
      }
    >;

    authorizedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApprovedModels(
      overrides?: CallOverrides
    ): Promise<[ImageVerification.ModelStructOutput[]]>;

    getVerification(
      contentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ImageVerification.VerificationResultStructOutput]>;

    isImageVerified(
      contentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minScoreThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    modelIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinScoreThreshold(
      _minScoreThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTruChain(
      _truChainAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerificationPrice(
      _verificationPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeVerification(
      contentHash: PromiseOrValue<BytesLike>,
      modelId: PromiseOrValue<BytesLike>,
      scoreBps: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeVerificationWithPayment(
      contentHash: PromiseOrValue<BytesLike>,
      modelId: PromiseOrValue<BytesLike>,
      scoreBps: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    truChain(overrides?: CallOverrides): Promise<[string]>;

    verificationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    verificationPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    verifications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber, string] & {
        contentHash: string;
        modelId: string;
        scoreBps: BigNumber;
        verified: boolean;
        timestamp: BigNumber;
        verifier: string;
      }
    >;
  };

  addVerifier(
    verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveModel(
    modelId: PromiseOrValue<BytesLike>,
    modelName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvedModels(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & { id: string; name: string; approved: boolean }
  >;

  authorizedVerifiers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getApprovedModels(
    overrides?: CallOverrides
  ): Promise<ImageVerification.ModelStructOutput[]>;

  getVerification(
    contentHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ImageVerification.VerificationResultStructOutput>;

  isImageVerified(
    contentHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minScoreThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  modelIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeVerifier(
    verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinScoreThreshold(
    _minScoreThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTruChain(
    _truChainAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerificationPrice(
    _verificationPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeVerification(
    contentHash: PromiseOrValue<BytesLike>,
    modelId: PromiseOrValue<BytesLike>,
    scoreBps: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeVerificationWithPayment(
    contentHash: PromiseOrValue<BytesLike>,
    modelId: PromiseOrValue<BytesLike>,
    scoreBps: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  truChain(overrides?: CallOverrides): Promise<string>;

  verificationCount(overrides?: CallOverrides): Promise<BigNumber>;

  verificationPrice(overrides?: CallOverrides): Promise<BigNumber>;

  verifications(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, BigNumber, string] & {
      contentHash: string;
      modelId: string;
      scoreBps: BigNumber;
      verified: boolean;
      timestamp: BigNumber;
      verifier: string;
    }
  >;

  callStatic: {
    addVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveModel(
      modelId: PromiseOrValue<BytesLike>,
      modelName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedModels(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        id: string;
        name: string;
        approved: boolean;
      }
    >;

    authorizedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApprovedModels(
      overrides?: CallOverrides
    ): Promise<ImageVerification.ModelStructOutput[]>;

    getVerification(
      contentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ImageVerification.VerificationResultStructOutput>;

    isImageVerified(
      contentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minScoreThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    modelIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMinScoreThreshold(
      _minScoreThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTruChain(
      _truChainAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerificationPrice(
      _verificationPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeVerification(
      contentHash: PromiseOrValue<BytesLike>,
      modelId: PromiseOrValue<BytesLike>,
      scoreBps: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    storeVerificationWithPayment(
      contentHash: PromiseOrValue<BytesLike>,
      modelId: PromiseOrValue<BytesLike>,
      scoreBps: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    truChain(overrides?: CallOverrides): Promise<string>;

    verificationCount(overrides?: CallOverrides): Promise<BigNumber>;

    verificationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    verifications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber, string] & {
        contentHash: string;
        modelId: string;
        scoreBps: BigNumber;
        verified: boolean;
        timestamp: BigNumber;
        verifier: string;
      }
    >;
  };

  filters: {
    "ImageVerified(bytes32,bytes32,uint256,bool,uint256)"(
      contentHash?: PromiseOrValue<BytesLike> | null,
      modelId?: PromiseOrValue<BytesLike> | null,
      scoreBps?: null,
      verified?: null,
      timestamp?: null
    ): ImageVerifiedEventFilter;
    ImageVerified(
      contentHash?: PromiseOrValue<BytesLike> | null,
      modelId?: PromiseOrValue<BytesLike> | null,
      scoreBps?: null,
      verified?: null,
      timestamp?: null
    ): ImageVerifiedEventFilter;

    "ModelApproved(bytes32,string)"(
      modelId?: PromiseOrValue<BytesLike> | null,
      modelName?: null
    ): ModelApprovedEventFilter;
    ModelApproved(
      modelId?: PromiseOrValue<BytesLike> | null,
      modelName?: null
    ): ModelApprovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PaymentProcessed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): PaymentProcessedEventFilter;
    PaymentProcessed(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): PaymentProcessedEventFilter;

    "VerificationPriceUpdated(uint256)"(
      newPrice?: null
    ): VerificationPriceUpdatedEventFilter;
    VerificationPriceUpdated(
      newPrice?: null
    ): VerificationPriceUpdatedEventFilter;

    "VerifierAdded(address)"(
      verifier?: PromiseOrValue<string> | null
    ): VerifierAddedEventFilter;
    VerifierAdded(
      verifier?: PromiseOrValue<string> | null
    ): VerifierAddedEventFilter;

    "VerifierRemoved(address)"(
      verifier?: PromiseOrValue<string> | null
    ): VerifierRemovedEventFilter;
    VerifierRemoved(
      verifier?: PromiseOrValue<string> | null
    ): VerifierRemovedEventFilter;
  };

  estimateGas: {
    addVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveModel(
      modelId: PromiseOrValue<BytesLike>,
      modelName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvedModels(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedModels(overrides?: CallOverrides): Promise<BigNumber>;

    getVerification(
      contentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isImageVerified(
      contentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minScoreThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    modelIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinScoreThreshold(
      _minScoreThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTruChain(
      _truChainAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerificationPrice(
      _verificationPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeVerification(
      contentHash: PromiseOrValue<BytesLike>,
      modelId: PromiseOrValue<BytesLike>,
      scoreBps: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeVerificationWithPayment(
      contentHash: PromiseOrValue<BytesLike>,
      modelId: PromiseOrValue<BytesLike>,
      scoreBps: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    truChain(overrides?: CallOverrides): Promise<BigNumber>;

    verificationCount(overrides?: CallOverrides): Promise<BigNumber>;

    verificationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    verifications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveModel(
      modelId: PromiseOrValue<BytesLike>,
      modelName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvedModels(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedModels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVerification(
      contentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isImageVerified(
      contentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minScoreThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modelIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinScoreThreshold(
      _minScoreThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTruChain(
      _truChainAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerificationPrice(
      _verificationPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeVerification(
      contentHash: PromiseOrValue<BytesLike>,
      modelId: PromiseOrValue<BytesLike>,
      scoreBps: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeVerificationWithPayment(
      contentHash: PromiseOrValue<BytesLike>,
      modelId: PromiseOrValue<BytesLike>,
      scoreBps: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    truChain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verificationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verificationPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
